// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/marketplace.proto

package marketplace_project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketplaceClient is the client API for Marketplace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceClient interface {
	AddShop(ctx context.Context, in *NewShopData, opts ...grpc.CallOption) (*Id, error)
	FindShopById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShopData, error)
	FindShopNearMe(ctx context.Context, in *Location, opts ...grpc.CallOption) (*MultipleShopData, error)
	AddProduct(ctx context.Context, in *NewProductData, opts ...grpc.CallOption) (*Id, error)
}

type marketplaceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceClient(cc grpc.ClientConnInterface) MarketplaceClient {
	return &marketplaceClient{cc}
}

func (c *marketplaceClient) AddShop(ctx context.Context, in *NewShopData, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto.Marketplace/AddShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) FindShopById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShopData, error) {
	out := new(ShopData)
	err := c.cc.Invoke(ctx, "/proto.Marketplace/FindShopById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) FindShopNearMe(ctx context.Context, in *Location, opts ...grpc.CallOption) (*MultipleShopData, error) {
	out := new(MultipleShopData)
	err := c.cc.Invoke(ctx, "/proto.Marketplace/FindShopNearMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) AddProduct(ctx context.Context, in *NewProductData, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto.Marketplace/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceServer is the server API for Marketplace service.
// All implementations must embed UnimplementedMarketplaceServer
// for forward compatibility
type MarketplaceServer interface {
	AddShop(context.Context, *NewShopData) (*Id, error)
	FindShopById(context.Context, *Id) (*ShopData, error)
	FindShopNearMe(context.Context, *Location) (*MultipleShopData, error)
	AddProduct(context.Context, *NewProductData) (*Id, error)
	mustEmbedUnimplementedMarketplaceServer()
}

// UnimplementedMarketplaceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketplaceServer struct {
}

func (UnimplementedMarketplaceServer) AddShop(context.Context, *NewShopData) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShop not implemented")
}
func (UnimplementedMarketplaceServer) FindShopById(context.Context, *Id) (*ShopData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindShopById not implemented")
}
func (UnimplementedMarketplaceServer) FindShopNearMe(context.Context, *Location) (*MultipleShopData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindShopNearMe not implemented")
}
func (UnimplementedMarketplaceServer) AddProduct(context.Context, *NewProductData) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedMarketplaceServer) mustEmbedUnimplementedMarketplaceServer() {}

// UnsafeMarketplaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceServer will
// result in compilation errors.
type UnsafeMarketplaceServer interface {
	mustEmbedUnimplementedMarketplaceServer()
}

func RegisterMarketplaceServer(s grpc.ServiceRegistrar, srv MarketplaceServer) {
	s.RegisterService(&Marketplace_ServiceDesc, srv)
}

func _Marketplace_AddShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewShopData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).AddShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketplace/AddShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).AddShop(ctx, req.(*NewShopData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_FindShopById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).FindShopById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketplace/FindShopById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).FindShopById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_FindShopNearMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).FindShopNearMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketplace/FindShopNearMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).FindShopNearMe(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProductData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketplace/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).AddProduct(ctx, req.(*NewProductData))
	}
	return interceptor(ctx, in, info, handler)
}

// Marketplace_ServiceDesc is the grpc.ServiceDesc for Marketplace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marketplace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Marketplace",
	HandlerType: (*MarketplaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShop",
			Handler:    _Marketplace_AddShop_Handler,
		},
		{
			MethodName: "FindShopById",
			Handler:    _Marketplace_FindShopById_Handler,
		},
		{
			MethodName: "FindShopNearMe",
			Handler:    _Marketplace_FindShopNearMe_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _Marketplace_AddProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/marketplace.proto",
}
